{"version":3,"sources":["components/Chat/Chat.tsx","components/Message/Message.tsx","components/Button/Button.tsx","components/Input/Input.tsx","components/MessageForm/MessageForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","Message","message","text","dateTime","Date","toLocaleDateString","toLocaleTimeString","Button","type","color","children","size","className","Input","label","required","disabled","name","changeHandler","useState","value","setValue","htmlFor","id","onInput","event","target","handleChange","MessageForm","setMessage","messageFormState","setMessageFormState","onSubmit","preventDefault","Chat","messages","setMessages","useEffect","socketIOClient","withCredentials","extraHeaders","on","now","disconnect","map","emit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede4f994.chunk.js","sourcesContent":["import React, { useState, useEffect, FC } from 'react';\nimport Message from '../Message/Message';\nimport MessageForm from '../MessageForm/MessageForm';\nimport socketIOClient, { Socket } from 'socket.io-client';\nimport { IMessage } from 'app-shared-types';\nconst ENDPOINT = 'http://127.0.0.1:8080';\nlet socket: Socket;\n\nconst Chat: FC = () => {\n\tconst [messages, setMessages] = useState<IMessage[]>([{ id: 0, text: '' }]);\n\n\tuseEffect(() => {\n\t\tsocket = socketIOClient(ENDPOINT, {\n\t\t\twithCredentials: true,\n\t\t\textraHeaders: {\n\t\t\t\t'my-company': 'halkoliiteri.com',\n\t\t\t},\n\t\t});\n\t\tsocket?.on('add-message', (message: string) => {\n\t\t\tsetMessages((messages) => [...messages, { id: Date.now(), text: message }]);\n\t\t});\n\t\tsocket?.on('broadcast', (message: string) => {\n\t\t\tsetMessages((messages) => [...messages, { id: Date.now(), text: message }]);\n\t\t});\n\t\t// CLEAN UP THE EFFECT\n\t\treturn () => socket?.disconnect() as any;\n\t}, []);\n\n\tconst addMessage = (text: string) => {\n\t\tsocket?.emit('new-message', { text });\n\t};\n\treturn (\n\t\t<>\n\t\t\t{messages.map((message: IMessage) => {\n\t\t\t\treturn <Message key={message.id} message={message} />;\n\t\t\t})}\n\t\t\t<MessageForm setMessage={addMessage} />\n\t\t</>\n\t);\n};\n\nexport default Chat;\n","import React, { FC } from 'react';\nimport { IMessage } from 'app-shared-types';\n\ninterface IMessageProps {\n\tmessage: IMessage;\n}\n\nconst Message: FC<IMessageProps> = ({ message }) => {\n\treturn (\n\t\t<>\n\t\t\t{message.text && (\n\t\t\t\t<p>\n\t\t\t\t\t<time dateTime={new Date().toLocaleDateString('fi') + ' ' + new Date().toLocaleTimeString('fi')}>\n\t\t\t\t\t\t{new Date().toLocaleDateString('fi') + ' ' + new Date().toLocaleTimeString('fi')}{' '}\n\t\t\t\t\t</time>{' '}\n\t\t\t\t\t{message.text}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Message;\n","import React, { FC } from 'react';\nimport { ButtonTypes, Sizes } from 'app-shared-types';\n\ninterface IButtonProps {\n\ttype: ButtonTypes;\n\tcolor: string;\n\tsize: Sizes;\n}\n\nconst Button: FC<IButtonProps> = ({ type, color, children, size }) => {\n\treturn (\n\t\t<button type={type} className={'button button_' + color + ' ' + size}>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n\nexport default Button;\n","import React, { FC, useState } from 'react';\nimport { InputTypes } from 'app-shared-types';\n\ninterface IInputProps {\n\ttype: InputTypes;\n\tlabel: string;\n\trequired: boolean;\n\tdisabled?: boolean;\n\tname: string;\n\tchangeHandler: (event: any) => void;\n}\n\nconst Input: FC<IInputProps> = ({ type, label, required, disabled, name, changeHandler }) => {\n\tconst [value, setValue] = useState<string>('');\n\tconst handleChange = (event: any) => {\n\t\tchangeHandler(event.target.value);\n\t\tsetValue(event.target.value);\n\t};\n\treturn (\n\t\t<>\n\t\t\t<label htmlFor={name}>{label}</label>\n\t\t\t<input\n\t\t\t\tid={name}\n\t\t\t\ttype={type}\n\t\t\t\tclassName=\"input\"\n\t\t\t\tonInput={(event: any) => handleChange(event)}\n\t\t\t\tvalue={value}\n\t\t\t\trequired={required}\n\t\t\t\tdisabled={disabled}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default Input;\n","import React, { FC, useState, FormEvent } from 'react';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\n\ninterface IMessageFormProps {\n\tsetMessage: (event: any) => void;\n}\n\nconst MessageForm: FC<IMessageFormProps> = ({ setMessage }) => {\n\tconst [messageFormState, setMessageFormState] = useState('');\n\tconst handleSubmit = (event: FormEvent) => {\n\t\tevent.preventDefault();\n\t\tsetMessage(messageFormState);\n\t};\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<Input label=\"new message\" name=\"message\" type=\"text\" changeHandler={setMessageFormState} required />\n\t\t\t<Button color=\"primary\" type=\"submit\" size=\"md\">\n\t\t\t\tAdd\n\t\t\t</Button>\n\t\t</form>\n\t);\n};\n\nexport default MessageForm;\n","import React, { FC } from 'react';\nimport Chat from './components/Chat/Chat';\nimport './App.scss';\n\nconst App: FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<h1>Chatbot.io</h1>\n\t\t\t<Chat />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}