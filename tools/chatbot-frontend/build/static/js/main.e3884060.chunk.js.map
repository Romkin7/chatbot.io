{"version":3,"sources":["components/Message/Message.tsx","components/Input/Input.tsx","components/MessageForm/MessageForm.tsx","components/Chat/Chat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Message","message","dateTime","text","Input","type","label","required","disabled","name","changeHandler","value","htmlFor","id","className","onChange","MessageForm","useState","messageFormState","setMessageFormState","event","target","Chat","setMessage","setMessages","useEffect","socket","socketIOClient","withCredentials","extraHeaders","on","data","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAeeA,EARoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrC,OACC,kDACkB,sBAAMC,SAAUD,EAAQE,KAAxB,SAA+BF,EAAQE,WCY5CC,EATgB,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MACvF,OACC,qCACC,uBAAOC,QAASH,EAAhB,SAAuBH,IACvB,uBAAOO,GAAIJ,EAAMJ,KAAMA,EAAMS,UAAU,QAAQC,SAAUL,EAAeC,MAAOA,EAAOJ,SAAUA,EAAUC,SAAUA,QCExGQ,EAhBS,WACvB,MAAgDC,mBAAS,CAAEN,MAAO,KAAlE,mBAAOO,EAAP,KAAyBC,EAAzB,KACA,OACC,+BACC,cAAC,EAAD,CACCb,MAAM,cACNG,KAAK,UACLJ,KAAK,OACLK,cAAe,SAACU,GAAD,OAAgBD,EAAoBC,EAAMC,OAAOV,QAChEJ,UAAQ,EACRI,MAAOO,EAAiBP,W,iBCwBbW,MA/Bf,WACC,MAAwBL,mBAAS,IAAjC,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBACA,GADA,UAC0BA,mBAAS,KAAnC,mBACA,GADA,UAC8BA,mBAAS,CAAEJ,GAAI,EAAGV,KAAM,MAAtD,mBAAOF,EAAP,KAAgBsB,EAAhB,KACA,EAAgCN,mBAAS,IAAzC,mBAAiBO,GAAjB,WACA,EAAwBP,mBAAS,GAAjC,mBAiBA,OAjBA,UAEAQ,qBAAU,WACT,IAAMC,EAASC,IAXA,wBAWyB,CACvCC,iBAAiB,EACjBC,aAAc,CACb,aAAc,sBAGhBH,EAAOI,GAAG,eAAe,SAACC,GACzBR,EAAW,CAAEV,GAAI,EAAGV,KAAM4B,OAE3BL,EAAOI,GAAG,eAAe,SAACC,GACzBP,EAAYO,QAEX,IAGF,qCACC,cAAC,EAAD,CAAS9B,QAASA,IAClB,cAAC,EAAD,QCpBY+B,G,MARC,WACf,OACC,mCACC,cAAC,EAAD,QCOYC,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHXQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.e3884060.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { IMessage } from 'app-shared-types';\n\ninterface IMessageProps {\n\tmessage: IMessage;\n}\n\nconst Message: FC<IMessageProps> = ({ message }) => {\n\treturn (\n\t\t<p>\n\t\t\tToday's date is: <time dateTime={message.text}>{message.text}</time>\n\t\t</p>\n\t);\n};\n\nexport default Message;\n","import React, { FC } from 'react';\nimport { InputTypes } from 'app-shared-types';\n\ninterface IInputProps {\n\ttype: InputTypes;\n\tlabel: string;\n\trequired: boolean;\n\tdisabled?: boolean;\n\tname: string;\n\tchangeHandler: (event: any) => void;\n\tvalue: any;\n}\n\nconst Input: FC<IInputProps> = ({ type, label, required, disabled, name, changeHandler, value }) => {\n\treturn (\n\t\t<>\n\t\t\t<label htmlFor={name}>{label}</label>\n\t\t\t<input id={name} type={type} className=\"input\" onChange={changeHandler} value={value} required={required} disabled={disabled} />\n\t\t</>\n\t);\n};\n\nexport default Input;\n","import React, { FC, useState } from 'react';\nimport Input from '../Input/Input';\n\nconst MessageForm: FC = () => {\n\tconst [messageFormState, setMessageFormState] = useState({ value: '' });\n\treturn (\n\t\t<form>\n\t\t\t<Input\n\t\t\t\tlabel=\"new message\"\n\t\t\t\tname=\"message\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tchangeHandler={(event: any) => setMessageFormState(event.target.value)}\n\t\t\t\trequired\n\t\t\t\tvalue={messageFormState.value}\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nexport default MessageForm;\n","import React, { useState, useEffect } from 'react';\nimport Message from '../Message/Message';\nimport MessageForm from '../MessageForm/MessageForm';\nimport socketIOClient from 'socket.io-client';\nconst ENDPOINT = 'http://127.0.0.1:8080';\n\nfunction Chat() {\n\tconst [name, setName] = useState('');\n\tconst [room, setRoom] = useState('');\n\tconst [users, setUsers] = useState('');\n\tconst [message, setMessage] = useState({ id: 0, text: '' });\n\tconst [messages, setMessages] = useState([]);\n\tconst [flag, setFlag] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst socket = socketIOClient(ENDPOINT, {\n\t\t\twithCredentials: true,\n\t\t\textraHeaders: {\n\t\t\t\t'my-company': 'halkoliiteri.com',\n\t\t\t},\n\t\t});\n\t\tsocket.on('add-message', (data: string) => {\n\t\t\tsetMessage({ id: 1, text: data });\n\t\t});\n\t\tsocket.on('new-message', (data) => {\n\t\t\tsetMessages(data);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Message message={message} />\n\t\t\t<MessageForm />\n\t\t</>\n\t);\n}\n\nexport default Chat;\n","import React, { FC } from 'react';\nimport Chat from './components/Chat/Chat';\nimport './App.scss';\n\nconst App: FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<Chat />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}